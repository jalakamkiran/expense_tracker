import 'package:expense_tracker_clean/data/datasources/local/app_database.dart';
import 'package:flutter/services.dart';
import 'package:intl/intl.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';

class AppFunctions {
  List<String> months = [
    'January',
    'February',
    'March',
    'April',
    'May',
    'June',
    'July',
    'August',
    'September',
    'October',
    'November',
    'December'
  ];

  List<String> weekdays = [
    'Monday',
    'Tuesday',
    'Wednesday',
    'Thursday',
    'Friday',
    'Saturday',
    'Sunday'
  ];

  String formatDateTime(DateTime dateTime) {
    String weekday = weekdays[dateTime.weekday - 1];
    String month = months[dateTime.month - 1];
    String day = dateTime.day.toString();
    String year = dateTime.year.toString();
    String hour = dateTime.hour.toString().padLeft(2, '0');
    String minute = dateTime.minute.toString().padLeft(2, '0');

    return '$weekday $day $month $year  $hour:$minute';
  }

  int computeMonthIndex(String? month) {
    if (month == null) return DateTime.now().month;
    return months.indexOf(month) + 1;
  }

  String formatRupees(double amount) {
    final formatter = NumberFormat.currency(
      locale: 'en_IN', // Indian locale
      symbol: '₹',
      decimalDigits: amount.truncateToDouble() == amount ? 0 : 2,
    );

    return formatter.format(amount);
  }

  Future<void> shareReceipt(List<Transaction> transactions) async {
    if (transactions.isEmpty) {
      // Ideally show a snackbar or alert to user
      return;
    }

    try {
      final pdfBytes = await generateReceiptPdf(
        transactions: transactions,
        title: 'Expense Receipt',
        footer: 'Generated by GrowLedger',
      );

      await Printing.sharePdf(
        bytes: pdfBytes,
        filename: 'Receipt_${DateTime.now().millisecondsSinceEpoch}.pdf',
      );
    } catch (e) {
      // Handle error gracefully
      print('Error sharing receipt PDF: $e');
    }
  }

  Future<Uint8List> generateReceiptPdf({
    required List<Transaction> transactions,
    String title = 'Receipt',
    String footer = '',
  }) async {
    final pdf = pw.Document();

    final fontData = await rootBundle.load('assets/fonts/roboto/Roboto-Regular.ttf');
    final ttf = pw.Font.ttf(fontData);

    final currencyFormat = NumberFormat.currency(locale: 'en_IN', symbol: '₹');

    // Separate income and expense
    final incomeTxns = transactions.where((txn) => txn.type.toLowerCase() == "income").toList();
    final expenseTxns = transactions.where((txn) => txn.type.toLowerCase() == 'expense').toList();

    final totalIncome = incomeTxns.fold(0.0, (sum, txn) => sum + txn.amount);
    final totalExpense = expenseTxns.fold(0.0, (sum, txn) => sum + txn.amount);
    final totalPayable = totalExpense - totalIncome;

    pdf.addPage(
      pw.MultiPage(
        pageFormat: PdfPageFormat.a4,
        margin: const pw.EdgeInsets.all(24),
        build: (pw.Context context) => [
          pw.Text(
            title,
            style: pw.TextStyle(
              fontSize: 24,
              fontWeight: pw.FontWeight.bold,
              font: ttf,
            ),
          ),
          pw.SizedBox(height: 8),
          pw.Text(
            "Date: ${DateFormat('dd MMM yyyy').format(DateTime.now())}",
            style: pw.TextStyle(font: ttf),
          ),
          pw.SizedBox(height: 24),

          /// EXPENSE SECTION
          if (expenseTxns.isNotEmpty) ...[
            pw.Text('Expenses', style: pw.TextStyle(fontSize: 18, fontWeight: pw.FontWeight.bold, font: ttf)),
            pw.SizedBox(height: 8),
            pw.Table.fromTextArray(
              headers: ['Date', 'Category', 'Label', 'Amount', 'Note'],
              data: expenseTxns.map((txn) {
                return [
                  DateFormat('dd/MM/yyyy').format(txn.date),
                  txn.category,
                  txn.label,
                  currencyFormat.format(txn.amount),
                  txn.description ?? '',
                ];
              }).toList(),
              headerStyle: pw.TextStyle(fontWeight: pw.FontWeight.bold, font: ttf),
              cellStyle: pw.TextStyle(font: ttf),
              cellAlignment: pw.Alignment.centerLeft,
              columnWidths: {
                0: const pw.FlexColumnWidth(1.5),
                1: const pw.FlexColumnWidth(1.5),
                2: const pw.FlexColumnWidth(1.5),
                3: const pw.FlexColumnWidth(1.2),
                4: const pw.FlexColumnWidth(3),
              },
            ),
            pw.SizedBox(height: 8),
            pw.Align(
              alignment: pw.Alignment.centerRight,
              child: pw.Text(
                "Total Expenses: ${currencyFormat.format(totalExpense)}",
                style: pw.TextStyle(font: ttf),
              ),
            ),
            pw.SizedBox(height: 24),
          ],

          /// INCOME SECTION
          if (incomeTxns.isNotEmpty) ...[
            pw.Text('Income', style: pw.TextStyle(fontSize: 18, fontWeight: pw.FontWeight.bold, font: ttf)),
            pw.SizedBox(height: 8),
            pw.Table.fromTextArray(
              headers: ['Date', 'Category', 'Label', 'Amount', 'Note'],
              data: incomeTxns.map((txn) {
                return [
                  DateFormat('dd/MM/yyyy').format(txn.date),
                  txn.category,
                  txn.label,
                  currencyFormat.format(txn.amount),
                  txn.description ?? '',
                ];
              }).toList(),
              headerStyle: pw.TextStyle(fontWeight: pw.FontWeight.bold, font: ttf),
              cellStyle: pw.TextStyle(font: ttf),
              cellAlignment: pw.Alignment.centerLeft,
              columnWidths: {
                0: const pw.FlexColumnWidth(1.5),
                1: const pw.FlexColumnWidth(1.5),
                2: const pw.FlexColumnWidth(1.5),
                3: const pw.FlexColumnWidth(1.2),
                4: const pw.FlexColumnWidth(3),
              },
            ),
            pw.SizedBox(height: 8),
            pw.Align(
              alignment: pw.Alignment.centerRight,
              child: pw.Text(
                "Total Income: ${currencyFormat.format(totalIncome)}",
                style: pw.TextStyle(font: ttf),
              ),
            ),
            pw.SizedBox(height: 24),
          ],

          /// FINAL PAYABLE
          pw.Divider(),
          pw.Align(
            alignment: pw.Alignment.centerRight,
            child: pw.Text(
              "Total Payable: ${currencyFormat.format(totalPayable)}",
              style: pw.TextStyle(
                fontSize: 16,
                fontWeight: pw.FontWeight.bold,
                font: ttf,
              ),
            ),
          ),

          /// FOOTER
          if (footer.isNotEmpty) ...[
            pw.SizedBox(height: 24),
            pw.Divider(),
            pw.Align(
              alignment: pw.Alignment.center,
              child: pw.Text(
                footer,
                style: pw.TextStyle(
                  fontSize: 12,
                  color: PdfColors.grey700,
                  font: ttf,
                ),
              ),
            ),
          ]
        ],
      ),
    );

    return pdf.save();
  }


}
